name: Build LEDE wr1200js

on: 
  release:
    types: [published]
  push:
    tags:
    - 'v*'
  #  branches: 
  #    - master
#  schedule:
#    - cron: 0 8 * * 5
  watch:
    types: [started]


env:
  TARGET_DEVICE: wr1200js
  TOTAL_KEEP_NUMBER: 19

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Initialize token
        env:
          DEBIAN_FRONTEND: noninteractive
          MY_TOKEN_SECRET: ${{ secrets.MY_TOKEN }}
          GITHUB_TOKEN_SECRET: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${MY_TOKEN_SECRET}" ]; then
            echo "MY_TOKEN=${MY_TOKEN_SECRET}" >> $GITHUB_ENV
          else
            echo "MY_TOKEN=${GITHUB_TOKEN_SECRET}" >> $GITHUB_ENV
          fi
    
      - name: Cancel previous runs
        uses: HiGarfield/cancel-workflow-action@0.9.0
        continue-on-error: true
        with:
          all_but_latest: true
          access_token: ${{ env.MY_TOKEN }}

      - name: Checkout
        uses: actions/checkout@master

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo swapoff -a
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler coreutils aria2
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

          WORKING_DIR="$GITHUB_WORKSPACE"
          echo "WORKING_DIR=${WORKING_DIR}" >>$GITHUB_ENV
          cd "${WORKING_DIR}"
          LEDE_VERSION="$(cat "${WORKING_DIR}/version")"
          echo "LEDE_VERSION=${LEDE_VERSION}" >>$GITHUB_ENV
          LEDE_OUTPUT_NAME="lede-${LEDE_VERSION}-${TARGET_DEVICE}"
          echo "LEDE_OUTPUT_NAME=${LEDE_OUTPUT_NAME}" >>$GITHUB_ENV
          echo "FIRMWARE=${WORKING_DIR}/out" >> $GITHUB_ENV

          cp -f "${WORKING_DIR}/.github/backup/download.pl" "${WORKING_DIR}/scripts/download.pl"

      - name: Load custom configuration
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          sed -i 's/HOST_BUILD_PARALLEL ?=/HOST_BUILD_PARALLEL ?= 1/g' include/host-build.mk
          sed -i 's/PKG_BUILD_PARALLEL ?=/PKG_BUILD_PARALLEL ?= 1/g' include/package.mk
          ./clean_all.sh
          cp -f "conf/.config.$TARGET_DEVICE" .config        
          make defconfig V=s

      - name: Download package
        id: package
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          for i in $(seq 6 -1 1); do make download -j${i} && break; done
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        id: compile
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo -e "$(($(nproc) + 1)) thread compile"
          make -j$(($(nproc) + 1)) || make -j1 V=s
          rm -rf ${FIRMWARE}
          mkdir -p ${FIRMWARE}
          cp -u -f bin/targets/*/*/${LEDE_OUTPUT_NAME}-*-sysupgrade.bin ${FIRMWARE}/
          cd ${FIRMWARE}/
          for f in *.bin; do mv "$f" "$(echo "$f" | sed -e 's/-squashfs//g' -e 's/-sysupgrade//g')"; done
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success'        
        with:
          name: ${{ env.LEDE_OUTPUT_NAME }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to cowtransfer
        id: cowtransfer
        if: steps.compile.outputs.status == 'success'
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          curl --retry 5 -fsSL git.io/file-transfer | bash -s beta
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(grep 'https' cowtransfer.log)"
          echo "::set-output name=url::$(grep 'https' cowtransfer.log | cut -f3 -d" ")"

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: steps.compile.outputs.status == 'success'
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          curl --retry 5 -fsSL git.io/file-transfer | bash -s beta
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(grep 'https' wetransfer.log)"
          echo "::set-output name=url::$(grep 'https' wetransfer.log | cut -f3 -d" ")"

      - name: Upload firmware to Transfer.sh
        id: transfersh
        if: steps.compile.outputs.status == 'success'
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          curl --retry 5 -fsSL git.io/file-transfer | bash -s beta
          ./transfer trs --no-progress ${FIRMWARE} 2>&1 | tee transfersh.log
          echo "::warning file=transfer.sh::$(grep 'https' transfersh.log)"
          echo "::set-output name=url::$(grep 'https' transfersh.log | cut -f3 -d" ")"

      - name: Upload firmware to CatBox
        id: catbox
        if: steps.compile.outputs.status == 'success'
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          curl --retry 5 -fsSL git.io/file-transfer | bash -s beta
          ./transfer cat --no-progress ${FIRMWARE} 2>&1 | tee catbox.log
          echo "::warning file=catbox.com::$(grep 'https' catbox.log)"
          echo "::set-output name=url::$(grep 'https' catbox.log | cut -f3 -d" ")"

      - name: Upload firmware to anonfiles
        id: anonfiles
        if: steps.compile.outputs.status == 'success'
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          upfile="${FIRMWARE}/${LEDE_OUTPUT_NAME}.bin"
          downurl="$(curl --retry 5 -F file=@${upfile} https://api.anonfiles.com/upload 2>/dev/null | tee | tr '\"' '\n' | grep "^https" | head -n 1)";
          echo "::warning file=anonfiles.com::Download Link: ${downurl}"
          echo "::set-output name=url::${downurl}"

      - name: Generate release tag
        id: tag
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "::set-output name=release_tag::${LEDE_OUTPUT_NAME}"
          touch "$WORKING_DIR/release.txt"
          echo "🔗 [奶牛快传下载](${{ steps.cowtransfer.outputs.url }})" >> "$WORKING_DIR/release.txt"
          echo "🔗 [WeTransfer下载](${{ steps.wetransfer.outputs.url }})" >> "$WORKING_DIR/release.txt"
          echo "🔗 [Transfer.sh下载](${{ steps.transfersh.outputs.url }})" >> "$WORKING_DIR/release.txt"
          echo "🔗 [CatBox下载](${{ steps.catbox.outputs.url }})" >> "$WORKING_DIR/release.txt"
          echo "🔗 [anonfiles下载](${{ steps.anonfiles.outputs.url }})" >> "$WORKING_DIR/release.txt"
          cd "${FIRMWARE}"
          echo "" >> "$WORKING_DIR/release.txt"
          echo "文件MD5校验：" >> "$WORKING_DIR/release.txt"
          md5sum *.bin | awk '{print $2,$1}' >> "$WORKING_DIR/release.txt"
          echo "" >> "$WORKING_DIR/release.txt"
          echo "以上所有链接的文件均相同，不同网盘过期时间不同，仅需下载其中一个链接即可。若以上链接均过期失效或无法打开，请在以下Assets中下载文件。下载后请核对文件MD5校验。" >> "$WORKING_DIR/release.txt"
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: HiGarfield/action-gh-release@v1
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ env.MY_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: ${{ env.WORKING_DIR }}/release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Remove old releases
        uses: HiGarfield/delete-older-releases@v0.1.0
        continue-on-error: true
        with:
          keep_latest: ${{ env.TOTAL_KEEP_NUMBER }}
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ env.MY_TOKEN }}
